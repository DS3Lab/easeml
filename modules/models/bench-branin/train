#!/usr/bin/python

import argparse
import json
import os

import easemlschema.schema as sch
import easemlschema.dataset as ds

with open("schema-in.json") as f:
    schemaIn = json.load(f)

# This is wrong. They just happen to be the same schemas here. This is just for show.
with open("schema-in.json") as f:
    schemaOut = json.load(f)

schIn = sch.Schema.load(schemaIn)
schOut = sch.Schema.load(schemaOut)

#schIn = sch.Schema.load(schema["input"])
#schOut = sch.Schema.load(schema["output"])

if __name__ == "__main__":

    description = "Mean absolute error."
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument("--data", required=True, help="directory containing input data")
    parser.add_argument("--config", required=True, help="config file")
    parser.add_argument("--output", required=True, help="directory where the memory will be dumped")
    parser.add_argument("--metadata", required=False, help="directory where the metadata will be dumped")

    args = parser.parse_args()

    datasetIn = ds.Dataset.load(os.path.join(args.data, "input"))
    datasetOut = ds.Dataset.load(os.path.join(args.data, "output"))

    # Infer schemas.
    srcSchemaIn = datasetIn.infer_schema()
    srcSchemaOut = datasetOut.infer_schema()

    matchSchemaIn = schIn.match(srcSchemaIn, build_matching=True)
    matchSchemaOut = schOut.match(srcSchemaOut, build_matching=True)

    inName = matchSchemaIn.nodes["s1"].src_name
    outname = matchSchemaOut.nodes["s1"].src_name

    # Load the config file.
    with open(args.config) as f:
        config = json.load(f)

    noise = []
    for name in datasetIn.children:
        if isinstance(datasetIn.children[name], ds.Directory) and name in datasetOut.children:
            inValue = datasetIn.children[name].children[inName].data[0]
            outValue = datasetOut.children[name].children[outname].data[0]

            # The noise will be a percentage of the difference.
            noise.append(abs(inValue - outValue) * 0.05)

    noise = sum(noise) / len(noise)

    with open(os.path.join(args.output, "mem.json"), "w") as f:
        json.dump({"x1" : config["x1"], "x2" : config["x2"], "noise" : noise}, f)
